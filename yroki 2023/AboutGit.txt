Git - распределенная система контроля версий.

Merging - слияние разных версий файлов.
Централизованный подход - весь проект находится на сервере.
Распределенный подход к хранению данных - у всех есть копия проекта.

Git хранит копии проектов целиком - в виде снимка.
Если файл не изменялся, то Git ссылается на предыдущую версию файла.

Базовая работа:
1. Создаем файл - его статус "Не отслеживаемый", если изменили файл - его статус "Измененный".
2. git add - статус файла "Подготовленный"
3. git commit -m"Сообщение коммита"- статус файла "Зафиксированный"

git commit -a -m"Сообщение коммита" - тоже, что последовательное выполнение git add и git commit.
Добавляет только модифицированные файлы.

git commit --amend -m"Новое сообщение коммита" - дополняет последний коммит, добавляя новые изменения,
Также меняет сообщение коммита.

git status - текущий статус репозитория.

Варианты git add:
git add file1 file2
git add. - добавить все файлы в текущей папке.
git add*.java - добавить все файлы в текущей папке с расширением .java.
git add someDir/*.java - добавить все файлы в папке папке someDir с расширением .java.
git add someDir - добавить все файлы в папке папке someDir.
git add "*.java" - добавить все файлы в проекте с расширением .java

git log - посмотреть всю историю коммитов.

git diff - разница между текущим неотслеживаемым состоянием репозитория и состоянием репозитория в прошлом.
git diff --staged - разница между текущим отслеживаемым состоянием и последним зафиксированным у репозитория.
git diff COMMIT_ID - разница между текущим состоянием репозитория и указанным снимком(COMMIT_ID),
который можно посмотреть через git log.

git reset - сброс изменений.
Указатель head - это указатель на текущий коммит. Версия проекта.
git reset head^ - где ^ - указывает на сколько head откатываем проект.
Аналог git reset head^ - git reset head~цифра.

git reset имеет 3 режима.
--soft - возвращает проект к указанном коммиту, все коммиты после указанного перемещаются в отслеживаемую зону.
--mixed - возвращает проект к указанном коммиту, все коммиты после указанного перемещаются в неотслеживаемую зону.
--hard - полностью удаляет все коммиты после указанного.
Вариант написания: git reset [--soft|--mixed|--hard][commit_id\hash commit'a]

git reset по умолчанию используется --mixed.

git checkout - пермещение между коммитами, версиями отдельных файлов и ветками.
git checkout с хэш или с HEAD.
При перемещение между комимитами HEAD находится в состоянии DETACHED (отделенный), т.е. отделен от актуальной версии проекта.
Любые изменения, сделанные в прошлом удаляются.

git checkout - пермещение между версиями файлов - возвращение файлов к прошлой версии в текущем коммите.
Только неотслеживаемые изменения.
git checkout хэш коммита --путь до файла.
git checkout -- . - возвращение всех файлов в репозитории к версии в последнем коммите.
git checkout НАЗВАНИЕ_ВЕТКИ - переключение на другую ветку.

Две черты указывает, что после них идет текст (путь до файлов).

git clean - удаляет неотслеживаемые файлы.
git clean -n - какие файлы будут удалены.
git clean -f - удаляет файлы.

git remote -v - просмотр списка существующих удаленных репозиториев.
git remote add НАЗВАНИЕ_РЕПОЗИТОРИЯ АДРЕС_РЕПОЗИТОРИЯ - добавить новый удаленный репозиторий, находящийся по указанному адресу.
git remote remove НАЗВАНИЕ_РЕПОЗИТОРИЯ - удалить репозиторий с указанным названием.

git push НАЗВАНИЕ_УДАЛЕННОГО_РЕПОЗИТОРИЯ ВЕТКА - отправка локального репозитория на удаленный.

git pull НАЗВАНИЕ_УДАЛЕННОГО_РЕПОЗИТОРИЯ ВЕТКА - получения обновлений с удаленного репозитория.

git clone АДРЕС_УДАЛЕННОГО_РЕПОЗИТОРИЯ - клонирование удаленного репозитория.

git branch НАЗВАНИЕ ВЕТКИ - создание новой ветки.
git branch - просмотр, на какой ветки находится.
git branch -d НАЗВАНИЕ ВЕТКИ - удаление ветки.

git merge НАЗВАНИЕ ВЕТКИ - сливает одну ветку с другой. Сначала перейти на мастер.

